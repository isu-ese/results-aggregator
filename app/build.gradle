/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Apply the jacoco code coverage plugin
    id 'jacoco'

    // Gradle License Plugin
    id "com.github.hierynomus.license" version "0.15.0"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

    // Use MavenCentral for resolving dependencies
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.4'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.0-M5-groovy-3.0'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // Apache Commons Log4J2
    compile 'org.apache.logging.log4j:log4j-api:2.14.1'
    compile 'org.apache.logging.log4j:log4j-core:2.14.1'

    // Apache Commons CSV
    compile 'org.apache.commons:commons-csv:1.8'

    // Apache Commons IO
    implementation 'commons-io:commons-io:2.8.0'

}

application {
    // Define the main class for the application.
    mainClass = 'edu.isu.isuese.experiment.results.App'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

license {
    header rootProject.file('LICENSE')
}

jacoco {
    toolVersion = "0.8.6"
    reportsDirectory = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
}

